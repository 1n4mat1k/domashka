#include <iostream>
#include <vector>
#include <iterator>
using namespace std;

class Search_depth
{
private:
	vector <int> MyVector1;
	int* ways;
	int amount_elements;

public:
	int** arr_matrix_elements;	//массив элементов матрицы
	vector <int> vector_element;

	bool* visited1 = new bool[amount_elements];
	vector <int> ways1;

	/*1*/void input_matrix(int** arr_matrix, int amount)
	{
		arr_matrix_elements = new int* [amount];
		arr_matrix_elements = arr_matrix;

		amount_elements = amount;
		ways = new int[amount];

		cout << "Матрица сохранена" << endl;

		for (int i = 0; i < amount; i++)
		{
			ways1.push_back(0);
			visited1[i] = false;
		}

	}

	vector <int> vector_return;
	vector <int> vector_return1;

	int work_one_time = 0;
	/*3*/void traversal(int element_start)
	{
		if (work_one_time == 0)			// Добавляет первый элемент в массив ТОЛЬКО ОДИН РАЗ, иначе каждый раз при вызове данного метода начальное значение добавлялось каждый раз в конец массива
		{
			vector_return.push_back(element_start + 1);
			++work_one_time;
		}

		for (int i = 0; i < amount_elements; i++)
		{
			if (!visited1[i] && arr_matrix_elements[element_start][i] == 1)
			{
				ways1[i] = element_start;
				visited1[element_start] = true;
				vector_return.push_back(i + 1);
				traversal(i);
			}
		}
	}

	/*3.1*/void output_route(int element_start, int element_end)
	{
		int temp;
		MyVector1 = vector_return;

		while (element_end != MyVector1.back())
		{
			MyVector1.pop_back();
		}

		int unit = MyVector1.back();
		MyVector1.pop_back();
		temp = MyVector1.back();

		while (temp - 1 != element_start)
		{
			vector_return1.push_back(unit);

			while (arr_matrix_elements[unit - 1][temp - 1] != 1)
			{
				MyVector1.pop_back();
				temp = MyVector1.back();
			}

			unit = MyVector1.back();
		}

		vector_return1.push_back(unit);
	}

	/*3.2*/void clear_info()						// Очистка значения элементов, чтобы при следующем вызове метода traversal всё работало нормально
	{
		for (int i = 0; i < amount_elements; i++)	// Очистка вершин после их прохождения
		{
			visited1[i] = 0;
		}
		while (!vector_return.empty())				// Очистка значений элементов в массиве, который возвращает значения поочереди посещённых вершин
		{
			vector_return.pop_back();
		}
		while (!vector_return1.empty())				// Очистка значений элементов в массиве, который возвращает значения точки маршрута
		{
			vector_return1.pop_back();
		}
		work_one_time = 0;							// Здесь ноль, чтобы в следующий раз вернулось значение начальной вершины
	}
};




int main()
{
	setlocale(LC_ALL, "");

	Search_depth newdata;
	int choose;
	int amount; // Будущее количество элементов в матрице
	int temp;	// Промежуточная переменная
	int element_start;
	int element_end;
	int** arr_matrix;

	do
	{
		cout << "\n\nВведите число\n"
			<< "1 - ввести данные в матрицу\n"
			<< "2 - вывод матрицы\n"
			<< "3 - вывод обхода всех элементов\n"
			<< "4 - закончить программу\n";

		cin >> choose;

		if (choose == 1)
		{
			cout << "Введите количество элементов в матрице: ";
			cin >> amount;

			arr_matrix = new int* [amount];
			for (int i = 0; i < amount; i++)
			{
				arr_matrix[i] = new int[amount];
			}

			cout << endl;

			for (int i = 0; i < amount; i++)
			{
				arr_matrix[i][i] = 0;
				for (int j = i + 1; j < amount; j++) {
					cout << "Введите расстояние " << i + 1 << " - " << j + 1 << ": ";
					cin >> temp;
					arr_matrix[i][j] = temp;
					arr_matrix[j][i] = temp;

					newdata.vector_element.push_back(temp);
				}
			}
			newdata.input_matrix(arr_matrix, amount);
		}

		if (choose == 2)
		{
			for (int i = 0; i < amount; i++)
			{
				for (int j = 0; j < amount; j++)
					cout << newdata.arr_matrix_elements[i][j] << "\t";
				cout << endl;
			}
		}

		if (choose == 3)
		{
			cout << "Из какой точки начать отсчёт: ";
			cin >> element_start;

			cout << "До какой точки показать маршрут: ";
			cin >> element_end;

			element_start = element_start - 1;

			newdata.traversal(element_start);

			cout << "Поочерёдно посещённые вершины: ";

			for (int i = 0; i < newdata.vector_return.size(); i++)
			{
				cout << newdata.vector_return[i] << " ";
			}
			cout << endl;

			newdata.output_route(element_start, element_end);

			cout << "Вывод маршрута из точки " << element_start + 1 << " в точку " << element_end << ": ";
			for (int i = newdata.vector_return1.size() - 1; i > -1; i--)
			{
				cout << newdata.vector_return1[i] << " ";
			}

			newdata.clear_info();
		}

		if (choose == 4)
		{
			exit(1);
		}

	} while (true);
}

