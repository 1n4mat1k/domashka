#include <iostream>
#include <string>
using namespace std;

struct PersonalData
{
    string registration_number;
    string car_brand;
    int car_mileage;

    PersonalData* info;
};

//struct Node
//{
//protected:
//    PersonalData data;
//    Node* next;
//    Node* prev;
//};

//struct item
//{
//    item* next;
//    item* prev;
//    int data;
//
//    string registration_number;
//    string car_brand;
//    int car_mileage;
//};

class CarData
{
private:
    struct Node 
    {
        Node* next;
        Node* prev;
        PersonalData* Data;
    };

    //CarData* next;
    //CarData* prev;

public:
    //PersonalData* info;

    Node* first; //Адрес первого элемента списка
    Node* last;  //Адрес последнего элемента списка

    int count;   //Количество элементов в списке

    CarData()
    {
        last = NULL;
        first = NULL;
        count = 0;
    }

    /*2*/void add_last(PersonalData newdata)
    {
        PersonalData* ptr_pd = new PersonalData;
        //CarData* ptr_n = new CarData;
        Node* ptr_n = new Node;

        ptr_pd->registration_number = newdata.registration_number;
        ptr_pd->car_brand = newdata.car_brand;
        ptr_pd->car_mileage = newdata.car_mileage;

        if (first == NULL)
            first = ptr_n;
        ptr_n->next = NULL;
        ptr_n->prev = last;
        if (last != NULL)
            last->next = ptr_n;
        last = ptr_n;



        ptr_n->Data = ptr_pd;



        count++;
    }

    /*3*/void add_first(PersonalData newdata)
    {
        PersonalData* ptr_pd = new PersonalData;
        Node* ptr_n = new Node;

        ptr_pd->registration_number = newdata.registration_number;
        ptr_pd->car_brand = newdata.car_brand;
        ptr_pd->car_mileage = newdata.car_mileage;

        ptr_n->prev = NULL;
        if (first == NULL)
        {
            ptr_n->next = NULL;
            first = ptr_n;
            last = ptr_n;
        }
        else
        {
            first->prev = ptr_n;
            ptr_n->next = first;
            first = ptr_n;
        }
        count++;
    }

    /*4*/void del_last_item() //Удаление последнего элемента
    {
        Node* ptr_n = new Node;
        ptr_n = last;

        ptr_n->next = NULL;
        last = ptr_n->prev;

        delete ptr_n;
        count--;
    }

    /*5*/void del_first_item() //Удаление последнего элемента
    {
        Node* ptr_n = new Node;
        ptr_n = first;

        ptr_n->prev = NULL;
        first = ptr_n->next;

        delete ptr_n;
        count--;
    }

    /*6*/Node* search_item(string element) //Поиск адреса элемента по значению данных
    {
        PersonalData* ptr_pd = new PersonalData;
        Node* ptr_n_search = first;

        int index = 0;
        while (ptr_n_search != NULL)
        {
            if (ptr_pd->registration_number != element)
            {
                if (ptr_pd->car_brand != element)
                {
                    int int_element = stoi(element);
                    if (ptr_pd->car_mileage != int_element)
                    {
                        ptr_n_search = ptr_n_search->next;
                        ++index;
                    }
                    else
                        return ptr_n_search;
                }
                else
                    return ptr_n_search;
            }
            else
                return ptr_n_search;
        }
        throw 1;
    }

    /*7*/ Node* add_item_after_find(PersonalData newitem, string value)
    {
        Node* newptr_n = new Node;

        Node* temp_n = new Node;
        PersonalData* temp_pd = new PersonalData;

        Node* ptr_n = search_item(value);


        newptr_n = newptr_n->next;

        temp_pd->registration_number = newitem.registration_number;
        temp_pd->car_brand = newitem.car_brand;
        temp_pd->car_mileage = newitem.car_mileage;

        temp_n->next = newptr_n;
        temp_n->prev = ptr_n;

        if (temp_n->next == NULL) // Если следующий элемент будет NULL
            temp_n->prev->next = ptr_n;
        else
        {
            temp_n->prev->next = temp_n;
            temp_n->next->prev = temp_n;
        }

        while (temp_n != NULL)
        {
            temp_n = temp_n->prev;
        }

        ++count;
        return temp_n;
    }

    /*8*/void find_del_item(string value)
    {
        Node* ptr_n_place = search_item(value);
        int index = 0;

        if (ptr_n_place != first)
        {
            if (ptr_n_place != last) //Если элемент НЕ первый и НЕ последний
            {
                ptr_n_place->prev->next = ptr_n_place->next;
                ptr_n_place->next->prev = ptr_n_place->prev;
            }
            else //Если элемент НЕ первый, но последний
            {
                ptr_n_place->prev->next = NULL;
                last = ptr_n_place->prev;
            }
        }
        else
        {
            if (ptr_n_place != last) //Если элемент первый, но НЕ последний
            {
                ptr_n_place->prev = NULL;
                first = ptr_n_place->next;
            }
            else //Если элемент первый и последний
            {
                first = NULL;
                last = NULL;
            }
        }
        delete ptr_n_place;
        count--;
    }

    PersonalData vivod()
    {
        PersonalData* ptr_pd = new PersonalData;
        Node* ptr_n = new Node;
        PersonalData* arr;

        arr = new PersonalData[count];

        ptr_n->Data = first->Data;

        for (int i = 0; i < count; i++)
        {
            arr[i] = *ptr_n->Data;
            if (ptr_n->next = NULL)
                ptr_n->Data = ptr_n->next->Data;
        }
        return *arr;
    }
};



int main()
{
    setlocale(LC_ALL, "RUS");

    CarData car_data;
    PersonalData pers_data;
    string element;
    string value;
    int choose;

    do {
        cout << "\n1 - Вывод строки\n"
            << "+ 2 - Добавление элемента в конец списка\n"
            << "+ 3 - Добавление элемента в начало списка\n"
            << "+ 4 - Удаление конечного элемента списка\n"
            << "+ 5 - Удаление начального элемента списка\n"
            << "+ 6 - Поиск элемента по заданному значению поля структуры\n"
            << "7 - Добавление элемента после найденного\n"
            << "+ 8 - Удаление найденного элемента.\n"
            << "+ 9 - Выход\n";

        cin >> choose;

        if (choose == 1)        // Вывод данных на экран 
        {
            //while (newdata.info != NULL)
            for (int i = 0; i < car_data.count; i++)
            {
                //cout << "(" << pers_data.info->registration_number << ", " << pers_data.info->car_brand << ", " << pers_data.info->car_mileage << ")\t";
                // 
                //cout << "(" << pers_data.registration_number << ", " << pers_data.car_brand << ", " << pers_data.car_mileage << ")\t";
                // 
                //car_data.info = car_data.info->next;
                //pers_data.

                car_data.vivod();
            }
        }

        if (choose == 2)
        {
            cout << "Введите регисрационный номер машины: ";
            cin >> pers_data.registration_number;

            cout << "Введите марку машины: ";
            cin >> pers_data.car_brand;

            cout << "Введите пробег машины: ";
            cin >> pers_data.car_mileage;
            car_data.add_last(pers_data);
        }

        if (choose == 3)
        {
            cout << "Введите регисрационный номер машины: ";
            cin >> pers_data.registration_number;

            cout << "Введите марку машины: ";
            cin >> pers_data.car_brand;

            cout << "Введите пробег машины: ";
            cin >> pers_data.car_mileage;
            car_data.add_first(pers_data);
        }

        if (choose == 4)
        {
            car_data.del_last_item();
        }

        if (choose == 5)
        {
            car_data.del_first_item();
        }

        if (choose == 6)
        {
            cout << "Введите значение элемента для его поиска: ";
            cin >> value;
            try
            {
                cout << "Индекс этого элемента равен " << car_data.search_item(value) << endl;
            }
            catch (...)
            {
                cout << "Такого элемента нет в списке" << endl;
            }
        }

        if (choose == 7)
        {
            cout << "Введите регисрационный номер машины: ";
            cin >> pers_data.registration_number;

            cout << "Введите марку машины: ";
            cin >> pers_data.car_brand;

            cout << "Введите пробег машины: ";
            cin >> pers_data.car_mileage;

            try
            {
                car_data.add_item_after_find(pers_data, value);
            }
            catch (...)
            {
                cout << "Error";
            }
        }

        if (choose == 8)
        {

            try
            {
                car_data.find_del_item(value);
            }
            catch (...)
            {
                cout << "Error";
            }
        }

        if (choose == 9)
        {
            exit(1);
        }

    } while (true);
}
